"""
Created on Wed Mar  3 09:15:05 2021

@author: eliot
"""


import numpy as np
def DecompositionLU(A):
    n=np.shape(A)[0]
    L=np.identity(n)
    U= np.zeros(shape=(n,n))
    for i in range(0, n-1):
        for j in range(i+1, n):
            L[j,i] = A[j,i]/A[i,i]
            for k in range(i+1, n):
                A[j:k] -= L[j,i]*U[i,k]
        for j in range(i,n):
            U[i,j] = A[i,j]
    U[-1,-1] = A[-1,-1]
    return L, U



def ResolutionL(L,B):
    n=len(B)
    Y = [0 for i in range(n)]
    Y[0]=B[0]/L[0][0]
    for i in range(1,n):
        s=0
        for j in range(i-1,0,-1):
            s = s + L[i][j]*Y[j]
            Y[i] = (B[i] - s)/L[i][j]
    return Y

def ResolutionU(U,Y):
    n = len(Y)
    X = [0 for i in range(n)]
    X[n-1]=Y[n-1]/U[n-1][n-1]
    for i in range(n-2,-1,-1):
        s=0
        for j in range(i+1,n):
            s = s + U[i][j]*X[j]
            X[i] = (Y[i] - s)/U[i][j]
    return X

def ResolutionLU(A,B):
    L, U = DecompositionLU(A)
    Y = ResolutionL(L, B)
    X = ResolutionU(U, Y)
    return X
    
A = np.random.rand(300,300)
B = np.random.rand(300)
# print(A)
# print(B)
import time
start_time = time.time()
# print(L)
# print(U)
X = ResolutionLU(A, B)
# print (X)
print("--- %s seconds ---" % (time.time() - start_time))
